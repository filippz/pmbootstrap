From cecafcdd4ca00c9f294f21c107e79f4bb2bce855 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Filip=20Matijevi=C4=87?= <filip.matijevic.pz@gmail.com>
Date: Sun, 17 Apr 2016 17:24:06 +0200
Subject: [PATCH 27/53] misc: apds990x: convert to iio
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Filip MatijeviÄ‡ <filip.matijevic.pz@gmail.com>
---
 drivers/misc/apds990x.c | 740 ++++++++++++++++++++++++++----------------------
 1 file changed, 406 insertions(+), 334 deletions(-)

diff --git a/drivers/misc/apds990x.c b/drivers/misc/apds990x.c
index 12cd4f7927e7..669ab5c3d715 100644
--- a/drivers/misc/apds990x.c
+++ b/drivers/misc/apds990x.c
@@ -35,6 +35,12 @@
 #include <linux/i2c/apds990x.h>
 #include <linux/gpio.h>
 #include <linux/of_gpio.h>
+#include <linux/iio/events.h>
+#include <linux/iio/iio.h>
+#include <linux/iio/events.h>
+#include <linux/iio/sysfs.h>
+
+#define APDS990X_DRV_NAME	"apds990x"

 /* Register map */
 #define APDS990X_ENABLE	 0x00 /* Enable of states and interrupts */
@@ -490,7 +496,8 @@ static int apds990x_ack_int(struct apds990x_chip *chip, u8 mode)

 static irqreturn_t apds990x_irq(int irq, void *data)
 {
-	struct apds990x_chip *chip = data;
+	struct iio_dev *indio_dev = data;
+	struct apds990x_chip *chip = iio_priv(indio_dev);
	u8 status;

	apds990x_read_byte(chip, APDS990X_STATUS, &status);
@@ -515,8 +522,11 @@ static irqreturn_t apds990x_irq(int irq, void *data)
				chip->lux = chip->lux_raw;
				chip->lux_wait_fresh_res = false;
				wake_up(&chip->wait);
-				sysfs_notify(&chip->client->dev.kobj,
-					NULL, "lux0_input");
+				iio_push_event(indio_dev,
+								IIO_UNMOD_EVENT_CODE(IIO_INTENSITY, 0,
+													IIO_EV_TYPE_THRESH,
+													IIO_EV_DIR_EITHER),
+								iio_get_time_ns(indio_dev));
			}
		}

@@ -542,8 +552,11 @@ static irqreturn_t apds990x_irq(int irq, void *data)
				chip->prox_data = 0;
			else if (!chip->prox_continuous_mode)
				chip->prox_data = APDS_PROX_RANGE;
-			sysfs_notify(&chip->client->dev.kobj,
-				NULL, "prox0_raw");
+			iio_push_event(indio_dev,
+							IIO_UNMOD_EVENT_CODE(IIO_PROXIMITY, 0,
+												IIO_EV_TYPE_THRESH,
+												IIO_EV_DIR_EITHER),
+							iio_get_time_ns(indio_dev));
		}
	}
	mutex_unlock(&chip->mutex);
@@ -625,7 +638,7 @@ static int apds990x_chip_on(struct apds990x_chip *chip)
	chip->prox_data = 0;
	apds990x_configure(chip);
	apds990x_mode_on(chip);
-	return 0;
+	return err;
 }
 #endif

@@ -636,81 +649,8 @@ static int apds990x_chip_off(struct apds990x_chip *chip)
	return 0;
 }

-static ssize_t apds990x_lux_show(struct device *dev,
-				 struct device_attribute *attr, char *buf)
-{
-	struct apds990x_chip *chip = dev_get_drvdata(dev);
-	ssize_t ret;
-	u32 result;
-	long timeout;
-
-	if (pm_runtime_suspended(dev))
-		return -EIO;
-
-	timeout = wait_event_interruptible_timeout(chip->wait,
-						!chip->lux_wait_fresh_res,
-						msecs_to_jiffies(APDS_TIMEOUT));
-	if (!timeout)
-		return -EIO;
-
-	mutex_lock(&chip->mutex);
-	result = (chip->lux * chip->lux_calib) / APDS_CALIB_SCALER;
-	if (result > (APDS_RANGE * APDS990X_LUX_OUTPUT_SCALE))
-		result = APDS_RANGE * APDS990X_LUX_OUTPUT_SCALE;
-
-	ret = sprintf(buf, "%d.%d\n",
-		result / APDS990X_LUX_OUTPUT_SCALE,
-		result % APDS990X_LUX_OUTPUT_SCALE);
-	mutex_unlock(&chip->mutex);
-	return ret;
-}
-
-static DEVICE_ATTR(lux0_input, S_IRUGO, apds990x_lux_show, NULL);
-
-static ssize_t apds990x_lux_range_show(struct device *dev,
-				 struct device_attribute *attr, char *buf)
-{
-	return sprintf(buf, "%u\n", APDS_RANGE);
-}
-
-static DEVICE_ATTR(lux0_sensor_range, S_IRUGO, apds990x_lux_range_show, NULL);
-
-static ssize_t apds990x_lux_calib_format_show(struct device *dev,
-				 struct device_attribute *attr, char *buf)
-{
-	return sprintf(buf, "%u\n", APDS_CALIB_SCALER);
-}
-
-static DEVICE_ATTR(lux0_calibscale_default, S_IRUGO,
-		apds990x_lux_calib_format_show, NULL);
-
-static ssize_t apds990x_lux_calib_show(struct device *dev,
-				 struct device_attribute *attr, char *buf)
-{
-	struct apds990x_chip *chip = dev_get_drvdata(dev);
-
-	return sprintf(buf, "%u\n", chip->lux_calib);
-}
-
-static ssize_t apds990x_lux_calib_store(struct device *dev,
-				  struct device_attribute *attr,
-				  const char *buf, size_t len)
-{
-	struct apds990x_chip *chip = dev_get_drvdata(dev);
-	unsigned long value;
-	int ret;
-
-	ret = kstrtoul(buf, 0, &value);
-	if (ret)
-		return ret;
-
-	chip->lux_calib = value;
-
-	return len;
-}
-
-static DEVICE_ATTR(lux0_calibscale, S_IRUGO | S_IWUSR, apds990x_lux_calib_show,
-		apds990x_lux_calib_store);
+static IIO_CONST_ATTR(intensity_calibscale_default,
+						__stringify(APDS_CALIB_SCALER));

 static ssize_t apds990x_rate_avail(struct device *dev,
				   struct device_attribute *attr, char *buf)
@@ -723,12 +663,8 @@ static ssize_t apds990x_rate_avail(struct device *dev,
	return pos;
 }

-static ssize_t apds990x_rate_show(struct device *dev,
-				   struct device_attribute *attr, char *buf)
-{
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	return sprintf(buf, "%d\n", chip->arate);
-}
+static IIO_DEVICE_ATTR(intensity_rate_avail, S_IRUGO,
+						apds990x_rate_avail, NULL, 0);

 static int apds990x_set_arate(struct apds990x_chip *chip, int rate)
 {
@@ -755,100 +691,13 @@ static int apds990x_set_arate(struct apds990x_chip *chip, int rate)
			(chip->prox_persistence << APDS990X_PPERS_SHIFT));
 }

-static ssize_t apds990x_rate_store(struct device *dev,
-				  struct device_attribute *attr,
-				  const char *buf, size_t len)
-{
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	unsigned long value;
-	int ret;
-
-	ret = kstrtoul(buf, 0, &value);
-	if (ret)
-		return ret;
-
-	mutex_lock(&chip->mutex);
-	ret = apds990x_set_arate(chip, value);
-	mutex_unlock(&chip->mutex);
-
-	if (ret < 0)
-		return ret;
-	return len;
-}
-
-static DEVICE_ATTR(lux0_rate_avail, S_IRUGO, apds990x_rate_avail, NULL);
-
-static DEVICE_ATTR(lux0_rate, S_IRUGO | S_IWUSR, apds990x_rate_show,
-						 apds990x_rate_store);
-
-static ssize_t apds990x_prox_show(struct device *dev,
-				 struct device_attribute *attr, char *buf)
-{
-	ssize_t ret;
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	if (pm_runtime_suspended(dev) || !chip->prox_en)
-		return -EIO;
-
-	mutex_lock(&chip->mutex);
-	ret = sprintf(buf, "%d\n", chip->prox_data);
-	mutex_unlock(&chip->mutex);
-	return ret;
-}
-
-static DEVICE_ATTR(prox0_raw, S_IRUGO, apds990x_prox_show, NULL);
-
-static ssize_t apds990x_prox_range_show(struct device *dev,
-				 struct device_attribute *attr, char *buf)
-{
-	return sprintf(buf, "%u\n", APDS_PROX_RANGE);
-}
-
-static DEVICE_ATTR(prox0_sensor_range, S_IRUGO, apds990x_prox_range_show, NULL);
-
-static ssize_t apds990x_prox_enable_show(struct device *dev,
-				   struct device_attribute *attr, char *buf)
-{
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	return sprintf(buf, "%d\n", chip->prox_en);
-}
-
-static ssize_t apds990x_prox_enable_store(struct device *dev,
-				  struct device_attribute *attr,
-				  const char *buf, size_t len)
-{
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	unsigned long value;
-	int ret;
-
-	ret = kstrtoul(buf, 0, &value);
-	if (ret)
-		return ret;
-
-	mutex_lock(&chip->mutex);
-
-	if (!chip->prox_en)
-		chip->prox_data = 0;
-
-	if (value)
-		chip->prox_en++;
-	else if (chip->prox_en > 0)
-		chip->prox_en--;
-
-	if (!pm_runtime_suspended(dev))
-		apds990x_mode_on(chip);
-	mutex_unlock(&chip->mutex);
-	return len;
-}
-
-static DEVICE_ATTR(prox0_raw_en, S_IRUGO | S_IWUSR, apds990x_prox_enable_show,
-						   apds990x_prox_enable_store);
-
 static const char reporting_modes[][9] = {"trigger", "periodic"};

 static ssize_t apds990x_prox_reporting_mode_show(struct device *dev,
				   struct device_attribute *attr, char *buf)
 {
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
+	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
+	struct apds990x_chip *chip = iio_priv(indio_dev);
	return sprintf(buf, "%s\n",
		reporting_modes[!!chip->prox_continuous_mode]);
 }
@@ -857,7 +706,8 @@ static ssize_t apds990x_prox_reporting_mode_store(struct device *dev,
				  struct device_attribute *attr,
				  const char *buf, size_t len)
 {
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
+	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
+	struct apds990x_chip *chip = iio_priv(indio_dev);

	if (sysfs_streq(buf, reporting_modes[0]))
		chip->prox_continuous_mode = 0;
@@ -868,44 +718,22 @@ static ssize_t apds990x_prox_reporting_mode_store(struct device *dev,
	return len;
 }

-static DEVICE_ATTR(prox0_reporting_mode, S_IRUGO | S_IWUSR,
-		apds990x_prox_reporting_mode_show,
-		apds990x_prox_reporting_mode_store);
+static IIO_DEVICE_ATTR(proximity_reporting_mode, S_IRUGO | S_IWUSR,
+					apds990x_prox_reporting_mode_show,
+					apds990x_prox_reporting_mode_store, 0);

 static ssize_t apds990x_prox_reporting_avail_show(struct device *dev,
-				   struct device_attribute *attr, char *buf)
+							struct device_attribute *attr, char *buf)
 {
	return sprintf(buf, "%s %s\n", reporting_modes[0], reporting_modes[1]);
 }

-static DEVICE_ATTR(prox0_reporting_mode_avail, S_IRUGO | S_IWUSR,
-		apds990x_prox_reporting_avail_show, NULL);
-
-
-static ssize_t apds990x_lux_thresh_above_show(struct device *dev,
-				   struct device_attribute *attr, char *buf)
-{
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	return sprintf(buf, "%d\n", chip->lux_thres_hi);
-}
-
-static ssize_t apds990x_lux_thresh_below_show(struct device *dev,
-				   struct device_attribute *attr, char *buf)
-{
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	return sprintf(buf, "%d\n", chip->lux_thres_lo);
-}
+static IIO_DEVICE_ATTR(proximity_reporting_mode_avail, S_IRUGO,
+						apds990x_prox_reporting_avail_show, NULL, 0);

-static ssize_t apds990x_set_lux_thresh(struct apds990x_chip *chip, u32 *target,
-				const char *buf)
+static int apds990x_set_lux_thresh(struct apds990x_chip *chip,
+									u32 *target, unsigned long thresh)
 {
-	unsigned long thresh;
-	int ret;
-
-	ret = kstrtoul(buf, 0, &thresh);
-	if (ret)
-		return ret;
-
	if (thresh > APDS_RANGE)
		return -EINVAL;

@@ -918,75 +746,25 @@ static ssize_t apds990x_set_lux_thresh(struct apds990x_chip *chip, u32 *target,
	if (!chip->lux_wait_fresh_res)
		apds990x_refresh_athres(chip);
	mutex_unlock(&chip->mutex);
-	return ret;
-
-}
-
-static ssize_t apds990x_lux_thresh_above_store(struct device *dev,
-				  struct device_attribute *attr,
-				  const char *buf, size_t len)
-{
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	int ret = apds990x_set_lux_thresh(chip, &chip->lux_thres_hi, buf);
-	if (ret < 0)
-		return ret;
-	return len;
-}
-
-static ssize_t apds990x_lux_thresh_below_store(struct device *dev,
-				  struct device_attribute *attr,
-				  const char *buf, size_t len)
-{
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	int ret = apds990x_set_lux_thresh(chip, &chip->lux_thres_lo, buf);
-	if (ret < 0)
-		return ret;
-	return len;
-}
-
-static DEVICE_ATTR(lux0_thresh_above_value, S_IRUGO | S_IWUSR,
-		apds990x_lux_thresh_above_show,
-		apds990x_lux_thresh_above_store);
-
-static DEVICE_ATTR(lux0_thresh_below_value, S_IRUGO | S_IWUSR,
-		apds990x_lux_thresh_below_show,
-		apds990x_lux_thresh_below_store);
+	return 0;

-static ssize_t apds990x_prox_threshold_show(struct device *dev,
-				   struct device_attribute *attr, char *buf)
-{
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	return sprintf(buf, "%d\n", chip->prox_thres);
 }

-static ssize_t apds990x_prox_threshold_store(struct device *dev,
-				  struct device_attribute *attr,
-				  const char *buf, size_t len)
+static int apds990x_set_prox_thresh(struct apds990x_chip *chip,
+									u32 thresh)
 {
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
-	unsigned long value;
-	int ret;
-
-	ret = kstrtoul(buf, 0, &value);
-	if (ret)
-		return ret;
-
-	if ((value > APDS_RANGE) || (value == 0) ||
-		(value < APDS_PROX_HYSTERESIS))
+	if ((thresh > APDS_RANGE) || (thresh == 0) ||
+		(thresh < APDS_PROX_HYSTERESIS))
		return -EINVAL;

	mutex_lock(&chip->mutex);
-	chip->prox_thres = value;
+	chip->prox_thres = thresh;

	apds990x_force_p_refresh(chip);
	mutex_unlock(&chip->mutex);
-	return len;
+	return 0;
 }

-static DEVICE_ATTR(prox0_thresh_above_value, S_IRUGO | S_IWUSR,
-		apds990x_prox_threshold_show,
-		apds990x_prox_threshold_store);
-
 static ssize_t apds990x_power_state_show(struct device *dev,
				   struct device_attribute *attr, char *buf)
 {
@@ -998,7 +776,8 @@ static ssize_t apds990x_power_state_store(struct device *dev,
				  struct device_attribute *attr,
				  const char *buf, size_t len)
 {
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
+	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
+	struct apds990x_chip *chip = iio_priv(indio_dev);
	unsigned long value;
	int ret;

@@ -1020,41 +799,339 @@ static ssize_t apds990x_power_state_store(struct device *dev,
	return len;
 }

-static DEVICE_ATTR(power_state, S_IRUGO | S_IWUSR,
+static IIO_DEVICE_ATTR(power_state, S_IRUGO | S_IWUSR,
		apds990x_power_state_show,
-		apds990x_power_state_store);
+		apds990x_power_state_store, 0);

 static ssize_t apds990x_chip_id_show(struct device *dev,
				   struct device_attribute *attr, char *buf)
 {
-	struct apds990x_chip *chip =  dev_get_drvdata(dev);
+	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
+	struct apds990x_chip *chip = iio_priv(indio_dev);
	return sprintf(buf, "%s %d\n", chip->chipname, chip->revision);
 }

-static DEVICE_ATTR(chip_id, S_IRUGO, apds990x_chip_id_show, NULL);
+static IIO_DEVICE_ATTR(chip_id, S_IRUGO,
+						apds990x_chip_id_show, NULL, 0);
+
+#define APDS990X_CONST_ATTR(name) (&iio_const_attr_##name.dev_attr.attr)
+#define APDS990X_DEV_ATTR(name) (&iio_dev_attr_##name.dev_attr.attr)

 static struct attribute *sysfs_attrs_ctrl[] = {
-	&dev_attr_lux0_calibscale.attr,
-	&dev_attr_lux0_calibscale_default.attr,
-	&dev_attr_lux0_input.attr,
-	&dev_attr_lux0_sensor_range.attr,
-	&dev_attr_lux0_rate.attr,
-	&dev_attr_lux0_rate_avail.attr,
-	&dev_attr_lux0_thresh_above_value.attr,
-	&dev_attr_lux0_thresh_below_value.attr,
-	&dev_attr_prox0_raw_en.attr,
-	&dev_attr_prox0_raw.attr,
-	&dev_attr_prox0_sensor_range.attr,
-	&dev_attr_prox0_thresh_above_value.attr,
-	&dev_attr_prox0_reporting_mode.attr,
-	&dev_attr_prox0_reporting_mode_avail.attr,
-	&dev_attr_chip_id.attr,
-	&dev_attr_power_state.attr,
-	NULL
+	APDS990X_CONST_ATTR(intensity_calibscale_default),
+	APDS990X_DEV_ATTR(intensity_rate_avail),
+	APDS990X_DEV_ATTR(proximity_reporting_mode),
+	APDS990X_DEV_ATTR(proximity_reporting_mode_avail),
+	APDS990X_DEV_ATTR(chip_id),
+	APDS990X_DEV_ATTR(power_state),
+	NULL,
+};
+
+static struct attribute_group apds990x_attribute_group = {
+	.attrs = sysfs_attrs_ctrl,
+};
+
+static const struct iio_event_spec apds990x_lux_event_spec[] = {
+	{
+		.type = IIO_EV_TYPE_THRESH,
+		.dir = IIO_EV_DIR_RISING,
+		.mask_separate = BIT(IIO_EV_INFO_VALUE),
+	},
+	{
+		.type = IIO_EV_TYPE_THRESH,
+		.dir = IIO_EV_DIR_FALLING,
+		.mask_separate = BIT(IIO_EV_INFO_VALUE),
+	},
+};
+
+static const struct iio_event_spec apds990x_prox_event_spec[] = {
+	{
+		.type = IIO_EV_TYPE_THRESH,
+		.dir = IIO_EV_DIR_RISING,
+		.mask_separate = BIT(IIO_EV_INFO_VALUE) |
+			BIT(IIO_EV_INFO_ENABLE),
+	},
 };

-static struct attribute_group apds990x_attribute_group[] = {
-	{.attrs = sysfs_attrs_ctrl },
+static const struct iio_chan_spec apds990x_channels[] = {
+	{
+		.type = IIO_INTENSITY,
+		.info_mask_separate = BIT(IIO_CHAN_INFO_PROCESSED) |
+							  BIT(IIO_CHAN_INFO_SCALE) |
+							  BIT(IIO_CHAN_INFO_SAMP_FREQ) |
+							  BIT(IIO_CHAN_INFO_CALIBSCALE),
+		.event_spec = apds990x_lux_event_spec,
+		.num_event_specs = ARRAY_SIZE(apds990x_lux_event_spec),
+	},
+	{
+		.type = IIO_PROXIMITY,
+		.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) |
+							  BIT(IIO_CHAN_INFO_SCALE),
+		.event_spec = apds990x_prox_event_spec,
+		.num_event_specs = ARRAY_SIZE(apds990x_prox_event_spec),
+	},
+};
+
+static int apds990x_read_raw(struct iio_dev *indio_dev,
+							 struct iio_chan_spec const *chan,
+							 int *val, int *val2, long mask)
+{
+	struct apds990x_chip *chip = iio_priv(indio_dev);
+	struct device *dev = &chip->client->dev;
+	long timeout;
+	u32 result;
+	int ret = -EINVAL;
+
+	switch (mask) {
+	case IIO_CHAN_INFO_PROCESSED:
+		switch (chan->type) {
+		case IIO_INTENSITY:
+			if (pm_runtime_suspended(dev))
+				return -EIO;
+
+			timeout = wait_event_interruptible_timeout(chip->wait,
+						!chip->lux_wait_fresh_res,
+						msecs_to_jiffies(APDS_TIMEOUT));
+			if (!timeout)
+				return -EIO;
+
+			mutex_lock(&chip->mutex);
+			result = (chip->lux * chip->lux_calib) / APDS_CALIB_SCALER;
+			if (result > (APDS_RANGE * APDS990X_LUX_OUTPUT_SCALE))
+				result = APDS_RANGE * APDS990X_LUX_OUTPUT_SCALE;
+
+			*val = result;
+			*val2 = APDS990X_LUX_OUTPUT_SCALE;
+			ret = IIO_VAL_FRACTIONAL;
+			mutex_unlock(&chip->mutex);
+			break;
+		default:
+			return -EINVAL;
+		}
+		break;
+	case IIO_CHAN_INFO_RAW:
+		switch (chan->type) {
+		case IIO_PROXIMITY:
+			if (pm_runtime_suspended(dev) || !chip->prox_en)
+				return -EIO;
+
+			mutex_lock(&chip->mutex);
+			*val = chip->prox_data;
+			mutex_unlock(&chip->mutex);
+			ret = IIO_VAL_INT;
+			break;
+		default:
+			return -EINVAL;
+		}
+		break;
+	case IIO_CHAN_INFO_SCALE:
+		mutex_lock(&chip->mutex);
+		switch (chan->type) {
+		case IIO_INTENSITY:
+			*val = APDS_RANGE;
+			ret = IIO_VAL_INT;
+			break;
+		case IIO_PROXIMITY:
+			*val = APDS_PROX_RANGE;
+			ret = IIO_VAL_INT;
+			break;
+		default:
+			return -EINVAL;
+		}
+		mutex_unlock(&chip->mutex);
+		break;
+	case IIO_CHAN_INFO_SAMP_FREQ:
+		switch (chan->type) {
+		case IIO_INTENSITY:
+			*val = chip->arate;
+			ret = IIO_VAL_INT;
+			break;
+		default:
+			return -EINVAL;
+		}
+		break;
+	case IIO_CHAN_INFO_CALIBSCALE:
+		switch (chan->type) {
+		case IIO_INTENSITY:
+			*val = chip->lux_calib;
+			ret = IIO_VAL_INT;
+			break;
+		default:
+			return -EINVAL;
+		}
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+static int apds990x_write_raw(struct iio_dev *indio_dev,
+							  struct iio_chan_spec const *chan,
+							  int val, int val2, long mask)
+{
+	struct apds990x_chip *chip = iio_priv(indio_dev);
+
+	switch (mask) {
+	case IIO_CHAN_INFO_SAMP_FREQ:
+		switch (chan->type) {
+		case IIO_INTENSITY:
+			if (val != 0)
+				return -EINVAL;
+			return apds990x_set_arate(chip, val2);
+		default:
+			return -EINVAL;
+		}
+		break;
+	case IIO_CHAN_INFO_CALIBSCALE:
+		switch (chan->type) {
+		case IIO_INTENSITY:
+			if (val < 0 || val > USHRT_MAX || val2 != 0)
+				return -EINVAL;
+			chip->lux_calib = val;
+			break;
+		default:
+			return -EINVAL;
+		}
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int apds990x_read_event(struct iio_dev *indio_dev,
+		const struct iio_chan_spec *chan, enum iio_event_type type,
+		enum iio_event_direction dir, enum iio_event_info info,
+		int *val, int *val2)
+{
+	struct apds990x_chip *chip = iio_priv(indio_dev);
+
+	switch (chan->type) {
+	case IIO_INTENSITY:
+		switch (dir) {
+		case IIO_EV_DIR_RISING:
+			*val = chip->lux_thres_hi;
+			break;
+		case IIO_EV_DIR_FALLING:
+			*val = chip->lux_thres_lo;
+			break;
+		default:
+			return -EINVAL;
+		}
+	case IIO_PROXIMITY:
+		*val = chip->prox_thres;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return IIO_VAL_INT;
+}
+
+static int apds990x_write_event(struct iio_dev *indio_dev,
+		const struct iio_chan_spec *chan, enum iio_event_type type,
+		enum iio_event_direction dir, enum iio_event_info info, int val,
+		int val2)
+{
+	struct apds990x_chip *chip = iio_priv(indio_dev);
+	u32 *thersh;
+	int ret;
+
+	switch (chan->type) {
+	case IIO_INTENSITY:
+		switch (dir) {
+		case IIO_EV_DIR_RISING:
+			thersh = &chip->lux_thres_hi;
+			break;
+		case IIO_EV_DIR_FALLING:
+			thersh = &chip->lux_thres_lo;
+			break;
+		default:
+			return -EINVAL;
+		}
+		mutex_lock(&chip->mutex);
+		ret = apds990x_set_lux_thresh(chip, thersh, val);
+		mutex_unlock(&chip->mutex);
+		break;
+	case IIO_PROXIMITY:
+		switch (dir) {
+		case IIO_EV_DIR_RISING:
+			mutex_lock(&chip->mutex);
+			ret = apds990x_set_prox_thresh(chip, val);
+			mutex_unlock(&chip->mutex);
+			break;
+		default:
+			return -EINVAL;
+		}
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+static int apds990x_read_event_config(struct iio_dev *indio_dev,
+					 const struct iio_chan_spec *chan,
+					 enum iio_event_type type,
+					 enum iio_event_direction dir)
+{
+	struct apds990x_chip *chip = iio_priv(indio_dev);
+
+	switch (chan->type) {
+	case IIO_PROXIMITY:
+		return chip->prox_en;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int apds990x_write_event_config(struct iio_dev *indio_dev,
+					 const struct iio_chan_spec *chan,
+					 enum iio_event_type type,
+					 enum iio_event_direction dir, int state)
+{
+	struct apds990x_chip *chip = iio_priv(indio_dev);
+	struct device *dev = &chip->client->dev;
+
+	state = !!state;
+
+	switch (chan->type) {
+	case IIO_PROXIMITY:
+		mutex_lock(&chip->mutex);
+		if (!chip->prox_en)
+			chip->prox_data = 0;
+
+		if (state)
+			chip->prox_en++;
+		else if (chip->prox_en > 0)
+			chip->prox_en--;
+
+		if (!pm_runtime_suspended(dev))
+			apds990x_mode_on(chip);
+		mutex_unlock(&chip->mutex);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct iio_info apds990x_info = {
+	.driver_module = THIS_MODULE,
+	.attrs = &apds990x_attribute_group,
+	.read_raw = apds990x_read_raw,
+	.write_raw = apds990x_write_raw,
+	.read_event_value = apds990x_read_event,
+	.write_event_value = apds990x_write_event,
+	.read_event_config = apds990x_read_event_config,
+	.write_event_config = apds990x_write_event_config,
 };

 #ifdef CONFIG_OF
@@ -1129,14 +1206,23 @@ static int apds990x_probe(struct i2c_client *client,
				const struct i2c_device_id *id)
 {
	struct apds990x_chip *chip;
+	struct iio_dev *indio_dev;
	int err = 0;

-	chip = kzalloc(sizeof *chip, GFP_KERNEL);
-	if (!chip)
+	indio_dev = devm_iio_device_alloc(&client->dev, sizeof(*chip));
+	if (!indio_dev)
		return -ENOMEM;

-	i2c_set_clientdata(client, chip);
-	chip->client  = client;
+	indio_dev->info = &apds990x_info;
+	indio_dev->name = APDS990X_DRV_NAME;
+	indio_dev->channels = apds990x_channels;
+	indio_dev->num_channels = ARRAY_SIZE(apds990x_channels);
+	indio_dev->modes = INDIO_DIRECT_MODE;
+
+	chip = iio_priv(indio_dev);
+	i2c_set_clientdata(client, indio_dev);
+
+	chip->client = client;

	init_waitqueue_head(&chip->wait);
	mutex_init(&chip->mutex);
@@ -1199,7 +1285,7 @@ static int apds990x_probe(struct i2c_client *client,
	chip->regs[0].supply = reg_vcc;
	chip->regs[1].supply = reg_vled;

-	err = regulator_bulk_get(&client->dev,
+	err = devm_regulator_bulk_get(&client->dev,
				 ARRAY_SIZE(chip->regs), chip->regs);
	if (err < 0) {
		dev_err(&client->dev, "Cannot get regulators\n");
@@ -1209,7 +1295,7 @@ static int apds990x_probe(struct i2c_client *client,
	err = regulator_bulk_enable(ARRAY_SIZE(chip->regs), chip->regs);
	if (err < 0) {
		dev_err(&client->dev, "Cannot enable regulators\n");
-		goto fail2;
+		goto fail1;
	}

	usleep_range(APDS_STARTUP_DELAY, 2 * APDS_STARTUP_DELAY);
@@ -1217,7 +1303,7 @@ static int apds990x_probe(struct i2c_client *client,
	err = apds990x_detect(chip);
	if (err < 0) {
		dev_err(&client->dev, "APDS990X not found\n");
-		goto fail3;
+		goto fail2;
	}

	pm_runtime_set_active(&client->dev);
@@ -1232,51 +1318,37 @@ static int apds990x_probe(struct i2c_client *client,
		err = chip->pdata->setup_resources();
		if (err) {
			err = -EINVAL;
-			goto fail3;
+			goto fail2;
		}
	}

-	err = sysfs_create_group(&chip->client->dev.kobj,
-				apds990x_attribute_group);
-	if (err < 0) {
-		dev_err(&chip->client->dev, "Sysfs registration failed\n");
-		goto fail4;
-	}
-
-	err = request_threaded_irq(client->irq, NULL,
-				apds990x_irq,
-				IRQF_TRIGGER_FALLING | IRQF_TRIGGER_LOW |
-				IRQF_ONESHOT,
-				"apds990x", chip);
+	err = devm_request_threaded_irq(&client->dev, client->irq, NULL,
+				apds990x_irq, IRQF_TRIGGER_FALLING | IRQF_TRIGGER_LOW |
+				IRQF_ONESHOT, "apds990x", indio_dev);
	if (err) {
		dev_err(&client->dev, "could not get IRQ %d\n",
			client->irq);
-		goto fail5;
+		goto fail3;
	}

+	err = iio_device_register(indio_dev);
+	if (err)
+		goto fail3;
+
	return err;
-fail5:
-	sysfs_remove_group(&chip->client->dev.kobj,
-			&apds990x_attribute_group[0]);
-fail4:
+fail3:
	if (chip->pdata && chip->pdata->release_resources)
		chip->pdata->release_resources();
-fail3:
-	regulator_bulk_disable(ARRAY_SIZE(chip->regs), chip->regs);
 fail2:
-	regulator_bulk_free(ARRAY_SIZE(chip->regs), chip->regs);
+	regulator_bulk_disable(ARRAY_SIZE(chip->regs), chip->regs);
 fail1:
-	kfree(chip);
	return err;
 }

 static int apds990x_remove(struct i2c_client *client)
 {
-	struct apds990x_chip *chip = i2c_get_clientdata(client);
-
-	free_irq(client->irq, chip);
-	sysfs_remove_group(&chip->client->dev.kobj,
-			apds990x_attribute_group);
+	struct iio_dev *indio_dev = i2c_get_clientdata(client);
+	struct apds990x_chip *chip = iio_priv(indio_dev);

	if (chip->pdata && chip->pdata->release_resources)
		chip->pdata->release_resources();
@@ -1287,17 +1359,14 @@ static int apds990x_remove(struct i2c_client *client)
	pm_runtime_disable(&client->dev);
	pm_runtime_set_suspended(&client->dev);

-	regulator_bulk_free(ARRAY_SIZE(chip->regs), chip->regs);
-
-	kfree(chip);
	return 0;
 }

 #ifdef CONFIG_PM_SLEEP
 static int apds990x_suspend(struct device *dev)
 {
-	struct i2c_client *client = to_i2c_client(dev);
-	struct apds990x_chip *chip = i2c_get_clientdata(client);
+	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
+	struct apds990x_chip *chip = iio_priv(indio_dev);

	apds990x_chip_off(chip);
	return 0;
@@ -1305,8 +1374,8 @@ static int apds990x_suspend(struct device *dev)

 static int apds990x_resume(struct device *dev)
 {
-	struct i2c_client *client = to_i2c_client(dev);
-	struct apds990x_chip *chip = i2c_get_clientdata(client);
+	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
+	struct apds990x_chip *chip = iio_priv(indio_dev);

	/*
	 * If we were enabled at suspend time, it is expected
@@ -1321,8 +1390,11 @@ static int apds990x_resume(struct device *dev)
 #ifdef CONFIG_PM
 static int apds990x_runtime_suspend(struct device *dev)
 {
-	struct i2c_client *client = to_i2c_client(dev);
-	struct apds990x_chip *chip = i2c_get_clientdata(client);
+	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
+	struct apds990x_chip *chip = iio_priv(indio_dev);
+
+	if (!chip->client)
+		return -EAGAIN;

	apds990x_chip_off(chip);
	return 0;
@@ -1330,8 +1402,8 @@ static int apds990x_runtime_suspend(struct device *dev)

 static int apds990x_runtime_resume(struct device *dev)
 {
-	struct i2c_client *client = to_i2c_client(dev);
-	struct apds990x_chip *chip = i2c_get_clientdata(client);
+	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
+	struct apds990x_chip *chip = iio_priv(indio_dev);

	apds990x_chip_on(chip);
	return 0;
@@ -1363,7 +1435,7 @@ MODULE_DEVICE_TABLE(of, apds990x_of_match);

 static struct i2c_driver apds990x_driver = {
	.driver	 = {
-		.name	= "apds990x",
+		.name	= APDS990X_DRV_NAME,
		.pm	= &apds990x_pm_ops,
 #ifdef CONFIG_OF
		.of_match_table	= of_match_ptr(apds990x_of_match),
--
2.11.0
